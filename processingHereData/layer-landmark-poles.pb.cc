// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/alpha/landmark/layer-landmark-poles.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-poles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {
class LandmarkPolesLayerTileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkPolesLayerTile>
     _instance;
} _LandmarkPolesLayerTile_default_instance_;
class PolesForLaneGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PolesForLaneGroup>
     _instance;
} _PolesForLaneGroup_default_instance_;
class PoleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pole>
     _instance;
} _Pole_default_instance_;

namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkPolesLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkPolesLayerTile, here_tile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkPolesLayerTile, poles_for_lane_groups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolesForLaneGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolesForLaneGroup, lane_group_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolesForLaneGroup, poles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, bottom_cross_section_diameter_cm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, top_cross_section_diameter_cm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, bottom_center_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, top_center_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pole, specification_compliance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LandmarkPolesLayerTile)},
  { 7, -1, sizeof(PolesForLaneGroup)},
  { 14, -1, sizeof(Pole)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkPolesLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PolesForLaneGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pole_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-poles.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::here::pb::hdmap::external::v1::geometry::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto::InitDefaults();
  ::com::here::pb::hdmap::external::v1::common::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto::InitDefaults();
  _LandmarkPolesLayerTile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkPolesLayerTile_default_instance_);_PolesForLaneGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PolesForLaneGroup_default_instance_);_Pole_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pole_default_instance_);_Pole_default_instance_._instance.get_mutable()->bottom_center_point_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      ::com::here::pb::hdmap::external::v1::geometry::Point3d::internal_default_instance());
  _Pole_default_instance_._instance.get_mutable()->top_center_point_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      ::com::here::pb::hdmap::external::v1::geometry::Point3d::internal_default_instance());
  _Pole_default_instance_._instance.get_mutable()->specification_compliance_ = const_cast< ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDcom/here/pb/hdmap/external/alpha/landm"
      "ark/layer-landmark-poles.proto\022)com.here"
      ".pb.hdmap.external.alpha.landmark\0325com/h"
      "ere/pb/hdmap/external/v1/geometry/geomet"
      "ry.proto\0321com/here/pb/hdmap/external/v1/"
      "common/common.proto\"\213\001\n\026LandmarkPolesLay"
      "erTile\022\024\n\014here_tile_id\030\001 \001(\r\022[\n\025poles_fo"
      "r_lane_groups\030\002 \003(\0132<.com.here.pb.hdmap."
      "external.alpha.landmark.PolesForLaneGrou"
      "p\"k\n\021PolesForLaneGroup\022\026\n\016lane_group_ref"
      "\030\001 \001(\004\022>\n\005poles\030\002 \003(\0132/.com.here.pb.hdma"
      "p.external.alpha.landmark.Pole\"\346\002\n\004Pole\022"
      "\n\n\002id\030\001 \001(\t\022(\n bottom_cross_section_diam"
      "eter_cm\030\002 \001(\021\022%\n\035top_cross_section_diame"
      "ter_cm\030\003 \001(\021\022L\n\023bottom_center_point\030\004 \001("
      "\0132/.com.here.pb.hdmap.external.v1.geomet"
      "ry.Point3d\022I\n\020top_center_point\030\005 \001(\0132/.c"
      "om.here.pb.hdmap.external.v1.geometry.Po"
      "int3d\022h\n\030specification_compliance\030\006 \001(\0132"
      "F.com.here.pb.hdmap.external.v1.common.S"
      "pecificationComplianceAssertionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 839);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-poles.proto", &protobuf_RegisterTypes);
  ::com::here::pb::hdmap::external::v1::geometry::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto::AddDescriptors();
  ::com::here::pb::hdmap::external::v1::common::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkPolesLayerTile::kHereTileIdFieldNumber;
const int LandmarkPolesLayerTile::kPolesForLaneGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkPolesLayerTile::LandmarkPolesLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
}
LandmarkPolesLayerTile::LandmarkPolesLayerTile(const LandmarkPolesLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      poles_for_lane_groups_(from.poles_for_lane_groups_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  here_tile_id_ = from.here_tile_id_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
}

void LandmarkPolesLayerTile::SharedCtor() {
  here_tile_id_ = 0u;
  _cached_size_ = 0;
}

LandmarkPolesLayerTile::~LandmarkPolesLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  SharedDtor();
}

void LandmarkPolesLayerTile::SharedDtor() {
}

void LandmarkPolesLayerTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkPolesLayerTile::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkPolesLayerTile& LandmarkPolesLayerTile::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkPolesLayerTile* LandmarkPolesLayerTile::New(::google::protobuf::Arena* arena) const {
  LandmarkPolesLayerTile* n = new LandmarkPolesLayerTile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkPolesLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poles_for_lane_groups_.Clear();
  here_tile_id_ = 0u;
  _internal_metadata_.Clear();
}

bool LandmarkPolesLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poles_for_lane_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  return false;
#undef DO_
}

void LandmarkPolesLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poles_for_lane_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poles_for_lane_groups(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
}

::google::protobuf::uint8* LandmarkPolesLayerTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poles_for_lane_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->poles_for_lane_groups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  return target;
}

size_t LandmarkPolesLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->poles_for_lane_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poles_for_lane_groups(static_cast<int>(i)));
    }
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkPolesLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkPolesLayerTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkPolesLayerTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
    MergeFrom(*source);
  }
}

void LandmarkPolesLayerTile::MergeFrom(const LandmarkPolesLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poles_for_lane_groups_.MergeFrom(from.poles_for_lane_groups_);
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void LandmarkPolesLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkPolesLayerTile::CopyFrom(const LandmarkPolesLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkPolesLayerTile::IsInitialized() const {
  return true;
}

void LandmarkPolesLayerTile::Swap(LandmarkPolesLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkPolesLayerTile::InternalSwap(LandmarkPolesLayerTile* other) {
  using std::swap;
  poles_for_lane_groups_.InternalSwap(&other->poles_for_lane_groups_);
  swap(here_tile_id_, other->here_tile_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkPolesLayerTile::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkPolesLayerTile

// uint32 here_tile_id = 1;
void LandmarkPolesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
::google::protobuf::uint32 LandmarkPolesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.here_tile_id)
  return here_tile_id_;
}
void LandmarkPolesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.here_tile_id)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
int LandmarkPolesLayerTile::poles_for_lane_groups_size() const {
  return poles_for_lane_groups_.size();
}
void LandmarkPolesLayerTile::clear_poles_for_lane_groups() {
  poles_for_lane_groups_.Clear();
}
const ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup& LandmarkPolesLayerTile::poles_for_lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Get(index);
}
::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* LandmarkPolesLayerTile::mutable_poles_for_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Mutable(index);
}
::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* LandmarkPolesLayerTile::add_poles_for_lane_groups() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >*
LandmarkPolesLayerTile::mutable_poles_for_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return &poles_for_lane_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >&
LandmarkPolesLayerTile::poles_for_lane_groups() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolesForLaneGroup::kLaneGroupRefFieldNumber;
const int PolesForLaneGroup::kPolesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolesForLaneGroup::PolesForLaneGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
}
PolesForLaneGroup::PolesForLaneGroup(const PolesForLaneGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      poles_(from.poles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_group_ref_ = from.lane_group_ref_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
}

void PolesForLaneGroup::SharedCtor() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PolesForLaneGroup::~PolesForLaneGroup() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  SharedDtor();
}

void PolesForLaneGroup::SharedDtor() {
}

void PolesForLaneGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolesForLaneGroup::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolesForLaneGroup& PolesForLaneGroup::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolesForLaneGroup* PolesForLaneGroup::New(::google::protobuf::Arena* arena) const {
  PolesForLaneGroup* n = new PolesForLaneGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolesForLaneGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poles_.Clear();
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PolesForLaneGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lane_group_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_group_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  return false;
#undef DO_
}

void PolesForLaneGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lane_group_ref(), output);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
}

::google::protobuf::uint8* PolesForLaneGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lane_group_ref(), target);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->poles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  return target;
}

size_t PolesForLaneGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->poles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poles(static_cast<int>(i)));
    }
  }

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_group_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolesForLaneGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PolesForLaneGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolesForLaneGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
    MergeFrom(*source);
  }
}

void PolesForLaneGroup::MergeFrom(const PolesForLaneGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poles_.MergeFrom(from.poles_);
  if (from.lane_group_ref() != 0) {
    set_lane_group_ref(from.lane_group_ref());
  }
}

void PolesForLaneGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolesForLaneGroup::CopyFrom(const PolesForLaneGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolesForLaneGroup::IsInitialized() const {
  return true;
}

void PolesForLaneGroup::Swap(PolesForLaneGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolesForLaneGroup::InternalSwap(PolesForLaneGroup* other) {
  using std::swap;
  poles_.InternalSwap(&other->poles_);
  swap(lane_group_ref_, other->lane_group_ref_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolesForLaneGroup::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolesForLaneGroup

// uint64 lane_group_ref = 1;
void PolesForLaneGroup::clear_lane_group_ref() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PolesForLaneGroup::lane_group_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.lane_group_ref)
  return lane_group_ref_;
}
void PolesForLaneGroup::set_lane_group_ref(::google::protobuf::uint64 value) {
  
  lane_group_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.lane_group_ref)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
int PolesForLaneGroup::poles_size() const {
  return poles_.size();
}
void PolesForLaneGroup::clear_poles() {
  poles_.Clear();
}
const ::com::here::pb::hdmap::external::alpha::landmark::Pole& PolesForLaneGroup::poles(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Get(index);
}
::com::here::pb::hdmap::external::alpha::landmark::Pole* PolesForLaneGroup::mutable_poles(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Mutable(index);
}
::com::here::pb::hdmap::external::alpha::landmark::Pole* PolesForLaneGroup::add_poles() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >*
PolesForLaneGroup::mutable_poles() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return &poles_;
}
const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >&
PolesForLaneGroup::poles() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pole::kIdFieldNumber;
const int Pole::kBottomCrossSectionDiameterCmFieldNumber;
const int Pole::kTopCrossSectionDiameterCmFieldNumber;
const int Pole::kBottomCenterPointFieldNumber;
const int Pole::kTopCenterPointFieldNumber;
const int Pole::kSpecificationComplianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pole::Pole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.Pole)
}
Pole::Pole(const Pole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_bottom_center_point()) {
    bottom_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d(*from.bottom_center_point_);
  } else {
    bottom_center_point_ = NULL;
  }
  if (from.has_top_center_point()) {
    top_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d(*from.top_center_point_);
  } else {
    top_center_point_ = NULL;
  }
  if (from.has_specification_compliance()) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion(*from.specification_compliance_);
  } else {
    specification_compliance_ = NULL;
  }
  ::memcpy(&bottom_cross_section_diameter_cm_, &from.bottom_cross_section_diameter_cm_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_cross_section_diameter_cm_) -
    reinterpret_cast<char*>(&bottom_cross_section_diameter_cm_)) + sizeof(top_cross_section_diameter_cm_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.Pole)
}

void Pole::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bottom_center_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_cross_section_diameter_cm_) -
      reinterpret_cast<char*>(&bottom_center_point_)) + sizeof(top_cross_section_diameter_cm_));
  _cached_size_ = 0;
}

Pole::~Pole() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.Pole)
  SharedDtor();
}

void Pole::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bottom_center_point_;
  if (this != internal_default_instance()) delete top_center_point_;
  if (this != internal_default_instance()) delete specification_compliance_;
}

void Pole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pole::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pole& Pole::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pole* Pole::New(::google::protobuf::Arena* arena) const {
  Pole* n = new Pole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pole::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bottom_center_point_ != NULL) {
    delete bottom_center_point_;
  }
  bottom_center_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && top_center_point_ != NULL) {
    delete top_center_point_;
  }
  top_center_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) {
    delete specification_compliance_;
  }
  specification_compliance_ = NULL;
  ::memset(&bottom_cross_section_diameter_cm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_cross_section_diameter_cm_) -
      reinterpret_cast<char*>(&bottom_cross_section_diameter_cm_)) + sizeof(top_cross_section_diameter_cm_));
  _internal_metadata_.Clear();
}

bool Pole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.external.alpha.landmark.Pole.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 bottom_cross_section_diameter_cm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bottom_cross_section_diameter_cm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 top_cross_section_diameter_cm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &top_cross_section_diameter_cm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_center_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_center_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specification_compliance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.Pole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.Pole)
  return false;
#undef DO_
}

void Pole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.external.alpha.landmark.Pole.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // sint32 bottom_cross_section_diameter_cm = 2;
  if (this->bottom_cross_section_diameter_cm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bottom_cross_section_diameter_cm(), output);
  }

  // sint32 top_cross_section_diameter_cm = 3;
  if (this->top_cross_section_diameter_cm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->top_cross_section_diameter_cm(), output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
  if (this->has_bottom_center_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bottom_center_point_, output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
  if (this->has_top_center_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->top_center_point_, output);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
  if (this->has_specification_compliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->specification_compliance_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.Pole)
}

::google::protobuf::uint8* Pole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.external.alpha.landmark.Pole.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // sint32 bottom_cross_section_diameter_cm = 2;
  if (this->bottom_cross_section_diameter_cm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bottom_cross_section_diameter_cm(), target);
  }

  // sint32 top_cross_section_diameter_cm = 3;
  if (this->top_cross_section_diameter_cm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->top_cross_section_diameter_cm(), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
  if (this->has_bottom_center_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bottom_center_point_, deterministic, target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
  if (this->has_top_center_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->top_center_point_, deterministic, target);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
  if (this->has_specification_compliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->specification_compliance_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.Pole)
  return target;
}

size_t Pole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
  if (this->has_bottom_center_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bottom_center_point_);
  }

  // .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
  if (this->has_top_center_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_center_point_);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
  if (this->has_specification_compliance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->specification_compliance_);
  }

  // sint32 bottom_cross_section_diameter_cm = 2;
  if (this->bottom_cross_section_diameter_cm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->bottom_cross_section_diameter_cm());
  }

  // sint32 top_cross_section_diameter_cm = 3;
  if (this->top_cross_section_diameter_cm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->top_cross_section_diameter_cm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  GOOGLE_DCHECK_NE(&from, this);
  const Pole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.Pole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.Pole)
    MergeFrom(*source);
  }
}

void Pole::MergeFrom(const Pole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_bottom_center_point()) {
    mutable_bottom_center_point()->::com::here::pb::hdmap::external::v1::geometry::Point3d::MergeFrom(from.bottom_center_point());
  }
  if (from.has_top_center_point()) {
    mutable_top_center_point()->::com::here::pb::hdmap::external::v1::geometry::Point3d::MergeFrom(from.top_center_point());
  }
  if (from.has_specification_compliance()) {
    mutable_specification_compliance()->::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion::MergeFrom(from.specification_compliance());
  }
  if (from.bottom_cross_section_diameter_cm() != 0) {
    set_bottom_cross_section_diameter_cm(from.bottom_cross_section_diameter_cm());
  }
  if (from.top_cross_section_diameter_cm() != 0) {
    set_top_cross_section_diameter_cm(from.top_cross_section_diameter_cm());
  }
}

void Pole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pole::CopyFrom(const Pole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.Pole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pole::IsInitialized() const {
  return true;
}

void Pole::Swap(Pole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pole::InternalSwap(Pole* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(bottom_center_point_, other->bottom_center_point_);
  swap(top_center_point_, other->top_center_point_);
  swap(specification_compliance_, other->specification_compliance_);
  swap(bottom_cross_section_diameter_cm_, other->bottom_cross_section_diameter_cm_);
  swap(top_cross_section_diameter_cm_, other->top_cross_section_diameter_cm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pole::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pole

// string id = 1;
void Pole::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Pole::id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  return id_.GetNoArena();
}
void Pole::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
#if LANG_CXX11
void Pole::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
#endif
void Pole::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
void Pole::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
::std::string* Pole::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pole::release_id() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pole::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}

// sint32 bottom_cross_section_diameter_cm = 2;
void Pole::clear_bottom_cross_section_diameter_cm() {
  bottom_cross_section_diameter_cm_ = 0;
}
::google::protobuf::int32 Pole::bottom_cross_section_diameter_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_cross_section_diameter_cm)
  return bottom_cross_section_diameter_cm_;
}
void Pole::set_bottom_cross_section_diameter_cm(::google::protobuf::int32 value) {
  
  bottom_cross_section_diameter_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_cross_section_diameter_cm)
}

// sint32 top_cross_section_diameter_cm = 3;
void Pole::clear_top_cross_section_diameter_cm() {
  top_cross_section_diameter_cm_ = 0;
}
::google::protobuf::int32 Pole::top_cross_section_diameter_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.top_cross_section_diameter_cm)
  return top_cross_section_diameter_cm_;
}
void Pole::set_top_cross_section_diameter_cm(::google::protobuf::int32 value) {
  
  top_cross_section_diameter_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.top_cross_section_diameter_cm)
}

// .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
bool Pole::has_bottom_center_point() const {
  return this != internal_default_instance() && bottom_center_point_ != NULL;
}
void Pole::clear_bottom_center_point() {
  if (GetArenaNoVirtual() == NULL && bottom_center_point_ != NULL) delete bottom_center_point_;
  bottom_center_point_ = NULL;
}
const ::com::here::pb::hdmap::external::v1::geometry::Point3d& Pole::bottom_center_point() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d* p = bottom_center_point_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point3d_default_instance_);
}
::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::mutable_bottom_center_point() {
  
  if (bottom_center_point_ == NULL) {
    bottom_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  return bottom_center_point_;
}
::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::release_bottom_center_point() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* temp = bottom_center_point_;
  bottom_center_point_ = NULL;
  return temp;
}
void Pole::set_allocated_bottom_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* bottom_center_point) {
  delete bottom_center_point_;
  bottom_center_point_ = bottom_center_point;
  if (bottom_center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
}

// .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
bool Pole::has_top_center_point() const {
  return this != internal_default_instance() && top_center_point_ != NULL;
}
void Pole::clear_top_center_point() {
  if (GetArenaNoVirtual() == NULL && top_center_point_ != NULL) delete top_center_point_;
  top_center_point_ = NULL;
}
const ::com::here::pb::hdmap::external::v1::geometry::Point3d& Pole::top_center_point() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d* p = top_center_point_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point3d_default_instance_);
}
::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::mutable_top_center_point() {
  
  if (top_center_point_ == NULL) {
    top_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  return top_center_point_;
}
::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::release_top_center_point() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* temp = top_center_point_;
  top_center_point_ = NULL;
  return temp;
}
void Pole::set_allocated_top_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* top_center_point) {
  delete top_center_point_;
  top_center_point_ = top_center_point;
  if (top_center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
}

// .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
bool Pole::has_specification_compliance() const {
  return this != internal_default_instance() && specification_compliance_ != NULL;
}
void Pole::clear_specification_compliance() {
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) delete specification_compliance_;
  specification_compliance_ = NULL;
}
const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& Pole::specification_compliance() const {
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* p = specification_compliance_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      &::com::here::pb::hdmap::external::v1::common::_SpecificationComplianceAssertion_default_instance_);
}
::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Pole::mutable_specification_compliance() {
  
  if (specification_compliance_ == NULL) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  return specification_compliance_;
}
::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Pole::release_specification_compliance() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* temp = specification_compliance_;
  specification_compliance_ = NULL;
  return temp;
}
void Pole::set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance) {
  delete specification_compliance_;
  specification_compliance_ = specification_compliance;
  if (specification_compliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)
