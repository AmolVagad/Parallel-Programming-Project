// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/alpha/landmark/layer-landmark-obstacles.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-obstacles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {
class LandmarkObstaclesLayerTileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkObstaclesLayerTile>
     _instance;
} _LandmarkObstaclesLayerTile_default_instance_;
class ObstaclesForLaneGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObstaclesForLaneGroup>
     _instance;
} _ObstaclesForLaneGroup_default_instance_;
class ObstacleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Obstacle>
     _instance;
} _Obstacle_default_instance_;

namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkObstaclesLayerTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkObstaclesLayerTile, here_tile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkObstaclesLayerTile, tile_center_here_2d_coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkObstaclesLayerTile, obstacles_for_lane_groups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclesForLaneGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclesForLaneGroup, lane_group_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclesForLaneGroup, obstacles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, specification_compliance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, height_above_road_cm_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LandmarkObstaclesLayerTile)},
  { 8, -1, sizeof(ObstaclesForLaneGroup)},
  { 15, -1, sizeof(Obstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkObstaclesLayerTile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstaclesForLaneGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Obstacle_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-obstacles.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::here::pb::hdmap::external::v1::geometry::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto::InitDefaults();
  ::com::here::pb::hdmap::external::v1::common::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto::InitDefaults();
  _LandmarkObstaclesLayerTile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkObstaclesLayerTile_default_instance_);_ObstaclesForLaneGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObstaclesForLaneGroup_default_instance_);_Obstacle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Obstacle_default_instance_);_Obstacle_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::internal_default_instance());
  _Obstacle_default_instance_._instance.get_mutable()->specification_compliance_ = const_cast< ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nHcom/here/pb/hdmap/external/alpha/landm"
      "ark/layer-landmark-obstacles.proto\022)com."
      "here.pb.hdmap.external.alpha.landmark\0325c"
      "om/here/pb/hdmap/external/v1/geometry/ge"
      "ometry.proto\0321com/here/pb/hdmap/external"
      "/v1/common/common.proto\"\277\001\n\032LandmarkObst"
      "aclesLayerTile\022\024\n\014here_tile_id\030\001 \001(\r\022&\n\036"
      "tile_center_here_2d_coordinate\030\002 \001(\022\022c\n\031"
      "obstacles_for_lane_groups\030\003 \003(\0132@.com.he"
      "re.pb.hdmap.external.alpha.landmark.Obst"
      "aclesForLaneGroup\"w\n\025ObstaclesForLaneGro"
      "up\022\026\n\016lane_group_ref\030\001 \001(\004\022F\n\tobstacles\030"
      "\002 \003(\01323.com.here.pb.hdmap.external.alpha"
      ".landmark.Obstacle\"\354\001\n\010Obstacle\022\n\n\002id\030\001 "
      "\001(\t\022L\n\010geometry\030\002 \001(\0132:.com.here.pb.hdma"
      "p.external.v1.geometry.LineString2dOffse"
      "t\022h\n\030specification_compliance\030\003 \001(\0132F.co"
      "m.here.pb.hdmap.external.v1.common.Speci"
      "ficationComplianceAssertion\022\034\n\024height_ab"
      "ove_road_cm\030\004 \001(\021b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "com/here/pb/hdmap/external/alpha/landmark/layer-landmark-obstacles.proto", &protobuf_RegisterTypes);
  ::com::here::pb::hdmap::external::v1::geometry::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fgeometry_2fgeometry_2eproto::AddDescriptors();
  ::com::here::pb::hdmap::external::v1::common::protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2fcommon_2fcommon_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkObstaclesLayerTile::kHereTileIdFieldNumber;
const int LandmarkObstaclesLayerTile::kTileCenterHere2DCoordinateFieldNumber;
const int LandmarkObstaclesLayerTile::kObstaclesForLaneGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkObstaclesLayerTile::LandmarkObstaclesLayerTile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
}
LandmarkObstaclesLayerTile::LandmarkObstaclesLayerTile(const LandmarkObstaclesLayerTile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacles_for_lane_groups_(from.obstacles_for_lane_groups_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tile_center_here_2d_coordinate_, &from.tile_center_here_2d_coordinate_,
    static_cast<size_t>(reinterpret_cast<char*>(&here_tile_id_) -
    reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
}

void LandmarkObstaclesLayerTile::SharedCtor() {
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  _cached_size_ = 0;
}

LandmarkObstaclesLayerTile::~LandmarkObstaclesLayerTile() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  SharedDtor();
}

void LandmarkObstaclesLayerTile::SharedDtor() {
}

void LandmarkObstaclesLayerTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkObstaclesLayerTile::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkObstaclesLayerTile& LandmarkObstaclesLayerTile::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkObstaclesLayerTile* LandmarkObstaclesLayerTile::New(::google::protobuf::Arena* arena) const {
  LandmarkObstaclesLayerTile* n = new LandmarkObstaclesLayerTile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkObstaclesLayerTile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_for_lane_groups_.Clear();
  ::memset(&tile_center_here_2d_coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&here_tile_id_) -
      reinterpret_cast<char*>(&tile_center_here_2d_coordinate_)) + sizeof(here_tile_id_));
  _internal_metadata_.Clear();
}

bool LandmarkObstaclesLayerTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 here_tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &here_tile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 tile_center_here_2d_coordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tile_center_here_2d_coordinate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles_for_lane_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  return false;
#undef DO_
}

void LandmarkObstaclesLayerTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->here_tile_id(), output);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tile_center_here_2d_coordinate(), output);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_for_lane_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacles_for_lane_groups(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
}

::google::protobuf::uint8* LandmarkObstaclesLayerTile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->here_tile_id(), target);
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tile_center_here_2d_coordinate(), target);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_for_lane_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->obstacles_for_lane_groups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  return target;
}

size_t LandmarkObstaclesLayerTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_for_lane_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles_for_lane_groups(static_cast<int>(i)));
    }
  }

  // sint64 tile_center_here_2d_coordinate = 2;
  if (this->tile_center_here_2d_coordinate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->tile_center_here_2d_coordinate());
  }

  // uint32 here_tile_id = 1;
  if (this->here_tile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->here_tile_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkObstaclesLayerTile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkObstaclesLayerTile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkObstaclesLayerTile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
    MergeFrom(*source);
  }
}

void LandmarkObstaclesLayerTile::MergeFrom(const LandmarkObstaclesLayerTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_for_lane_groups_.MergeFrom(from.obstacles_for_lane_groups_);
  if (from.tile_center_here_2d_coordinate() != 0) {
    set_tile_center_here_2d_coordinate(from.tile_center_here_2d_coordinate());
  }
  if (from.here_tile_id() != 0) {
    set_here_tile_id(from.here_tile_id());
  }
}

void LandmarkObstaclesLayerTile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkObstaclesLayerTile::CopyFrom(const LandmarkObstaclesLayerTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkObstaclesLayerTile::IsInitialized() const {
  return true;
}

void LandmarkObstaclesLayerTile::Swap(LandmarkObstaclesLayerTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkObstaclesLayerTile::InternalSwap(LandmarkObstaclesLayerTile* other) {
  using std::swap;
  obstacles_for_lane_groups_.InternalSwap(&other->obstacles_for_lane_groups_);
  swap(tile_center_here_2d_coordinate_, other->tile_center_here_2d_coordinate_);
  swap(here_tile_id_, other->here_tile_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkObstaclesLayerTile::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkObstaclesLayerTile

// uint32 here_tile_id = 1;
void LandmarkObstaclesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
::google::protobuf::uint32 LandmarkObstaclesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.here_tile_id)
  return here_tile_id_;
}
void LandmarkObstaclesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.here_tile_id)
}

// sint64 tile_center_here_2d_coordinate = 2;
void LandmarkObstaclesLayerTile::clear_tile_center_here_2d_coordinate() {
  tile_center_here_2d_coordinate_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LandmarkObstaclesLayerTile::tile_center_here_2d_coordinate() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.tile_center_here_2d_coordinate)
  return tile_center_here_2d_coordinate_;
}
void LandmarkObstaclesLayerTile::set_tile_center_here_2d_coordinate(::google::protobuf::int64 value) {
  
  tile_center_here_2d_coordinate_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.tile_center_here_2d_coordinate)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
int LandmarkObstaclesLayerTile::obstacles_for_lane_groups_size() const {
  return obstacles_for_lane_groups_.size();
}
void LandmarkObstaclesLayerTile::clear_obstacles_for_lane_groups() {
  obstacles_for_lane_groups_.Clear();
}
const ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup& LandmarkObstaclesLayerTile::obstacles_for_lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Get(index);
}
::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* LandmarkObstaclesLayerTile::mutable_obstacles_for_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Mutable(index);
}
::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* LandmarkObstaclesLayerTile::add_obstacles_for_lane_groups() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >*
LandmarkObstaclesLayerTile::mutable_obstacles_for_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return &obstacles_for_lane_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >&
LandmarkObstaclesLayerTile::obstacles_for_lane_groups() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstaclesForLaneGroup::kLaneGroupRefFieldNumber;
const int ObstaclesForLaneGroup::kObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstaclesForLaneGroup::ObstaclesForLaneGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
}
ObstaclesForLaneGroup::ObstaclesForLaneGroup(const ObstaclesForLaneGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacles_(from.obstacles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_group_ref_ = from.lane_group_ref_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
}

void ObstaclesForLaneGroup::SharedCtor() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ObstaclesForLaneGroup::~ObstaclesForLaneGroup() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  SharedDtor();
}

void ObstaclesForLaneGroup::SharedDtor() {
}

void ObstaclesForLaneGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstaclesForLaneGroup::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstaclesForLaneGroup& ObstaclesForLaneGroup::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstaclesForLaneGroup* ObstaclesForLaneGroup::New(::google::protobuf::Arena* arena) const {
  ObstaclesForLaneGroup* n = new ObstaclesForLaneGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstaclesForLaneGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ObstaclesForLaneGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 lane_group_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_group_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  return false;
#undef DO_
}

void ObstaclesForLaneGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lane_group_ref(), output);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
}

::google::protobuf::uint8* ObstaclesForLaneGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lane_group_ref(), target);
  }

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  return target;
}

size_t ObstaclesForLaneGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // uint64 lane_group_ref = 1;
  if (this->lane_group_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_group_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstaclesForLaneGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclesForLaneGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstaclesForLaneGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
    MergeFrom(*source);
  }
}

void ObstaclesForLaneGroup::MergeFrom(const ObstaclesForLaneGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.lane_group_ref() != 0) {
    set_lane_group_ref(from.lane_group_ref());
  }
}

void ObstaclesForLaneGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclesForLaneGroup::CopyFrom(const ObstaclesForLaneGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclesForLaneGroup::IsInitialized() const {
  return true;
}

void ObstaclesForLaneGroup::Swap(ObstaclesForLaneGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstaclesForLaneGroup::InternalSwap(ObstaclesForLaneGroup* other) {
  using std::swap;
  obstacles_.InternalSwap(&other->obstacles_);
  swap(lane_group_ref_, other->lane_group_ref_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstaclesForLaneGroup::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstaclesForLaneGroup

// uint64 lane_group_ref = 1;
void ObstaclesForLaneGroup::clear_lane_group_ref() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ObstaclesForLaneGroup::lane_group_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.lane_group_ref)
  return lane_group_ref_;
}
void ObstaclesForLaneGroup::set_lane_group_ref(::google::protobuf::uint64 value) {
  
  lane_group_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.lane_group_ref)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
int ObstaclesForLaneGroup::obstacles_size() const {
  return obstacles_.size();
}
void ObstaclesForLaneGroup::clear_obstacles() {
  obstacles_.Clear();
}
const ::com::here::pb::hdmap::external::alpha::landmark::Obstacle& ObstaclesForLaneGroup::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Get(index);
}
::com::here::pb::hdmap::external::alpha::landmark::Obstacle* ObstaclesForLaneGroup::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Mutable(index);
}
::com::here::pb::hdmap::external::alpha::landmark::Obstacle* ObstaclesForLaneGroup::add_obstacles() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >*
ObstaclesForLaneGroup::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >&
ObstaclesForLaneGroup::obstacles() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kIdFieldNumber;
const int Obstacle::kGeometryFieldNumber;
const int Obstacle::kSpecificationComplianceFieldNumber;
const int Obstacle::kHeightAboveRoadCmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_geometry()) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_specification_compliance()) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion(*from.specification_compliance_);
  } else {
    specification_compliance_ = NULL;
  }
  height_above_road_cm_ = from.height_above_road_cm_;
  // @@protoc_insertion_point(copy_constructor:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
}

void Obstacle::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_above_road_cm_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(height_above_road_cm_));
  _cached_size_ = 0;
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete specification_compliance_;
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacle& Obstacle::default_instance() {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::InitDefaults();
  return *internal_default_instance();
}

Obstacle* Obstacle::New(::google::protobuf::Arena* arena) const {
  Obstacle* n = new Obstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) {
    delete geometry_;
  }
  geometry_ = NULL;
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) {
    delete specification_compliance_;
  }
  specification_compliance_ = NULL;
  height_above_road_cm_ = 0;
  _internal_metadata_.Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.here.pb.hdmap.external.alpha.landmark.Obstacle.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specification_compliance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 height_above_road_cm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &height_above_road_cm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.external.alpha.landmark.Obstacle.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->geometry_, output);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
  if (this->has_specification_compliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->specification_compliance_, output);
  }

  // sint32 height_above_road_cm = 4;
  if (this->height_above_road_cm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->height_above_road_cm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.here.pb.hdmap.external.alpha.landmark.Obstacle.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
  if (this->has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->geometry_, deterministic, target);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
  if (this->has_specification_compliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->specification_compliance_, deterministic, target);
  }

  // sint32 height_above_road_cm = 4;
  if (this->height_above_road_cm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->height_above_road_cm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geometry_);
  }

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
  if (this->has_specification_compliance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->specification_compliance_);
  }

  // sint32 height_above_road_cm = 4;
  if (this->height_above_road_cm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->height_above_road_cm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_geometry()) {
    mutable_geometry()->::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset::MergeFrom(from.geometry());
  }
  if (from.has_specification_compliance()) {
    mutable_specification_compliance()->::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion::MergeFrom(from.specification_compliance());
  }
  if (from.height_above_road_cm() != 0) {
    set_height_above_road_cm(from.height_above_road_cm());
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(geometry_, other->geometry_);
  swap(specification_compliance_, other->specification_compliance_);
  swap(height_above_road_cm_, other->height_above_road_cm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacle

// string id = 1;
void Obstacle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Obstacle::id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  return id_.GetNoArena();
}
void Obstacle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
#if LANG_CXX11
void Obstacle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
#endif
void Obstacle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
void Obstacle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
::std::string* Obstacle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Obstacle::release_id() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Obstacle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}

// .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
bool Obstacle::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
void Obstacle::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& Obstacle::geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* p = geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString2dOffset_default_instance_);
}
::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Obstacle::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  return geometry_;
}
::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Obstacle::release_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
void Obstacle::set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
}

// .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
bool Obstacle::has_specification_compliance() const {
  return this != internal_default_instance() && specification_compliance_ != NULL;
}
void Obstacle::clear_specification_compliance() {
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) delete specification_compliance_;
  specification_compliance_ = NULL;
}
const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& Obstacle::specification_compliance() const {
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* p = specification_compliance_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      &::com::here::pb::hdmap::external::v1::common::_SpecificationComplianceAssertion_default_instance_);
}
::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Obstacle::mutable_specification_compliance() {
  
  if (specification_compliance_ == NULL) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  return specification_compliance_;
}
::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Obstacle::release_specification_compliance() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* temp = specification_compliance_;
  specification_compliance_ = NULL;
  return temp;
}
void Obstacle::set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance) {
  delete specification_compliance_;
  specification_compliance_ = specification_compliance;
  if (specification_compliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
}

// sint32 height_above_road_cm = 4;
void Obstacle::clear_height_above_road_cm() {
  height_above_road_cm_ = 0;
}
::google::protobuf::int32 Obstacle::height_above_road_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.height_above_road_cm)
  return height_above_road_cm_;
}
void Obstacle::set_height_above_road_cm(::google::protobuf::int32 value) {
  
  height_above_road_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Obstacle.height_above_road_cm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)
