// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/alpha/landmark/layer-landmark-obstacles.proto

#ifndef PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto__INCLUDED
#define PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/geometry/geometry.pb.h"
#include "com/here/pb/hdmap/external/v1/common/common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {
class LandmarkObstaclesLayerTile;
class LandmarkObstaclesLayerTileDefaultTypeInternal;
extern LandmarkObstaclesLayerTileDefaultTypeInternal _LandmarkObstaclesLayerTile_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class ObstaclesForLaneGroup;
class ObstaclesForLaneGroupDefaultTypeInternal;
extern ObstaclesForLaneGroupDefaultTypeInternal _ObstaclesForLaneGroup_default_instance_;
}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {

namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto

// ===================================================================

class LandmarkObstaclesLayerTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile) */ {
 public:
  LandmarkObstaclesLayerTile();
  virtual ~LandmarkObstaclesLayerTile();

  LandmarkObstaclesLayerTile(const LandmarkObstaclesLayerTile& from);

  inline LandmarkObstaclesLayerTile& operator=(const LandmarkObstaclesLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LandmarkObstaclesLayerTile(LandmarkObstaclesLayerTile&& from) noexcept
    : LandmarkObstaclesLayerTile() {
    *this = ::std::move(from);
  }

  inline LandmarkObstaclesLayerTile& operator=(LandmarkObstaclesLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LandmarkObstaclesLayerTile& default_instance();

  static inline const LandmarkObstaclesLayerTile* internal_default_instance() {
    return reinterpret_cast<const LandmarkObstaclesLayerTile*>(
               &_LandmarkObstaclesLayerTile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LandmarkObstaclesLayerTile* other);
  friend void swap(LandmarkObstaclesLayerTile& a, LandmarkObstaclesLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LandmarkObstaclesLayerTile* New() const PROTOBUF_FINAL { return New(NULL); }

  LandmarkObstaclesLayerTile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LandmarkObstaclesLayerTile& from);
  void MergeFrom(const LandmarkObstaclesLayerTile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LandmarkObstaclesLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
  int obstacles_for_lane_groups_size() const;
  void clear_obstacles_for_lane_groups();
  static const int kObstaclesForLaneGroupsFieldNumber = 3;
  const ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup& obstacles_for_lane_groups(int index) const;
  ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* mutable_obstacles_for_lane_groups(int index);
  ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* add_obstacles_for_lane_groups();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >*
      mutable_obstacles_for_lane_groups();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >&
      obstacles_for_lane_groups() const;

  // sint64 tile_center_here_2d_coordinate = 2;
  void clear_tile_center_here_2d_coordinate();
  static const int kTileCenterHere2DCoordinateFieldNumber = 2;
  ::google::protobuf::int64 tile_center_here_2d_coordinate() const;
  void set_tile_center_here_2d_coordinate(::google::protobuf::int64 value);

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup > obstacles_for_lane_groups_;
  ::google::protobuf::int64 tile_center_here_2d_coordinate_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstaclesForLaneGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup) */ {
 public:
  ObstaclesForLaneGroup();
  virtual ~ObstaclesForLaneGroup();

  ObstaclesForLaneGroup(const ObstaclesForLaneGroup& from);

  inline ObstaclesForLaneGroup& operator=(const ObstaclesForLaneGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstaclesForLaneGroup(ObstaclesForLaneGroup&& from) noexcept
    : ObstaclesForLaneGroup() {
    *this = ::std::move(from);
  }

  inline ObstaclesForLaneGroup& operator=(ObstaclesForLaneGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstaclesForLaneGroup& default_instance();

  static inline const ObstaclesForLaneGroup* internal_default_instance() {
    return reinterpret_cast<const ObstaclesForLaneGroup*>(
               &_ObstaclesForLaneGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ObstaclesForLaneGroup* other);
  friend void swap(ObstaclesForLaneGroup& a, ObstaclesForLaneGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstaclesForLaneGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  ObstaclesForLaneGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObstaclesForLaneGroup& from);
  void MergeFrom(const ObstaclesForLaneGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObstaclesForLaneGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
  int obstacles_size() const;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 2;
  const ::com::here::pb::hdmap::external::alpha::landmark::Obstacle& obstacles(int index) const;
  ::com::here::pb::hdmap::external::alpha::landmark::Obstacle* mutable_obstacles(int index);
  ::com::here::pb::hdmap::external::alpha::landmark::Obstacle* add_obstacles();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >*
      mutable_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >&
      obstacles() const;

  // uint64 lane_group_ref = 1;
  void clear_lane_group_ref();
  static const int kLaneGroupRefFieldNumber = 1;
  ::google::protobuf::uint64 lane_group_ref() const;
  void set_lane_group_ref(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle > obstacles_;
  ::google::protobuf::uint64 lane_group_ref_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Obstacle* other);
  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 2;
  const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* mutable_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* release_geometry();
  void set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry);

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
  bool has_specification_compliance() const;
  void clear_specification_compliance();
  static const int kSpecificationComplianceFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& specification_compliance() const;
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* mutable_specification_compliance();
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* release_specification_compliance();
  void set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance);

  // sint32 height_above_road_cm = 4;
  void clear_height_above_road_cm();
  static const int kHeightAboveRoadCmFieldNumber = 4;
  ::google::protobuf::int32 height_above_road_cm() const;
  void set_height_above_road_cm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.Obstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry_;
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance_;
  ::google::protobuf::int32 height_above_road_cm_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LandmarkObstaclesLayerTile

// uint32 here_tile_id = 1;
inline void LandmarkObstaclesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 LandmarkObstaclesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void LandmarkObstaclesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.here_tile_id)
}

// sint64 tile_center_here_2d_coordinate = 2;
inline void LandmarkObstaclesLayerTile::clear_tile_center_here_2d_coordinate() {
  tile_center_here_2d_coordinate_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LandmarkObstaclesLayerTile::tile_center_here_2d_coordinate() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.tile_center_here_2d_coordinate)
  return tile_center_here_2d_coordinate_;
}
inline void LandmarkObstaclesLayerTile::set_tile_center_here_2d_coordinate(::google::protobuf::int64 value) {
  
  tile_center_here_2d_coordinate_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.tile_center_here_2d_coordinate)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup obstacles_for_lane_groups = 3;
inline int LandmarkObstaclesLayerTile::obstacles_for_lane_groups_size() const {
  return obstacles_for_lane_groups_.size();
}
inline void LandmarkObstaclesLayerTile::clear_obstacles_for_lane_groups() {
  obstacles_for_lane_groups_.Clear();
}
inline const ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup& LandmarkObstaclesLayerTile::obstacles_for_lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Get(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* LandmarkObstaclesLayerTile::mutable_obstacles_for_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup* LandmarkObstaclesLayerTile::add_obstacles_for_lane_groups() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >*
LandmarkObstaclesLayerTile::mutable_obstacles_for_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return &obstacles_for_lane_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::ObstaclesForLaneGroup >&
LandmarkObstaclesLayerTile::obstacles_for_lane_groups() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkObstaclesLayerTile.obstacles_for_lane_groups)
  return obstacles_for_lane_groups_;
}

// -------------------------------------------------------------------

// ObstaclesForLaneGroup

// uint64 lane_group_ref = 1;
inline void ObstaclesForLaneGroup::clear_lane_group_ref() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ObstaclesForLaneGroup::lane_group_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.lane_group_ref)
  return lane_group_ref_;
}
inline void ObstaclesForLaneGroup::set_lane_group_ref(::google::protobuf::uint64 value) {
  
  lane_group_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.lane_group_ref)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.Obstacle obstacles = 2;
inline int ObstaclesForLaneGroup::obstacles_size() const {
  return obstacles_.size();
}
inline void ObstaclesForLaneGroup::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::com::here::pb::hdmap::external::alpha::landmark::Obstacle& ObstaclesForLaneGroup::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Get(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::Obstacle* ObstaclesForLaneGroup::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::Obstacle* ObstaclesForLaneGroup::add_obstacles() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >*
ObstaclesForLaneGroup::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return &obstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Obstacle >&
ObstaclesForLaneGroup::obstacles() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.ObstaclesForLaneGroup.obstacles)
  return obstacles_;
}

// -------------------------------------------------------------------

// Obstacle

// string id = 1;
inline void Obstacle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Obstacle::id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  return id_.GetNoArena();
}
inline void Obstacle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
#if LANG_CXX11
inline void Obstacle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
#endif
inline void Obstacle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
inline void Obstacle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}
inline ::std::string* Obstacle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Obstacle::release_id() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Obstacle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.id)
}

// .com.here.pb.hdmap.external.v1.geometry.LineString2dOffset geometry = 2;
inline bool Obstacle::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
inline void Obstacle::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset& Obstacle::geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* p = geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString2dOffset_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Obstacle::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  return geometry_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* Obstacle::release_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString2dOffset* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.geometry)
}

// .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 3;
inline bool Obstacle::has_specification_compliance() const {
  return this != internal_default_instance() && specification_compliance_ != NULL;
}
inline void Obstacle::clear_specification_compliance() {
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) delete specification_compliance_;
  specification_compliance_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& Obstacle::specification_compliance() const {
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* p = specification_compliance_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      &::com::here::pb::hdmap::external::v1::common::_SpecificationComplianceAssertion_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Obstacle::mutable_specification_compliance() {
  
  if (specification_compliance_ == NULL) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  return specification_compliance_;
}
inline ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Obstacle::release_specification_compliance() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
  
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* temp = specification_compliance_;
  specification_compliance_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance) {
  delete specification_compliance_;
  specification_compliance_ = specification_compliance;
  if (specification_compliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Obstacle.specification_compliance)
}

// sint32 height_above_road_cm = 4;
inline void Obstacle::clear_height_above_road_cm() {
  height_above_road_cm_ = 0;
}
inline ::google::protobuf::int32 Obstacle::height_above_road_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Obstacle.height_above_road_cm)
  return height_above_road_cm_;
}
inline void Obstacle::set_height_above_road_cm(::google::protobuf::int32 value) {
  
  height_above_road_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Obstacle.height_above_road_cm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dobstacles_2eproto__INCLUDED
