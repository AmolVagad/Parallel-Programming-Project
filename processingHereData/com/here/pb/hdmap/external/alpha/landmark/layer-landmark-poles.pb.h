// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/alpha/landmark/layer-landmark-poles.proto

#ifndef PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto__INCLUDED
#define PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/geometry/geometry.pb.h"
#include "com/here/pb/hdmap/external/v1/common/common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {
class LandmarkPolesLayerTile;
class LandmarkPolesLayerTileDefaultTypeInternal;
extern LandmarkPolesLayerTileDefaultTypeInternal _LandmarkPolesLayerTile_default_instance_;
class Pole;
class PoleDefaultTypeInternal;
extern PoleDefaultTypeInternal _Pole_default_instance_;
class PolesForLaneGroup;
class PolesForLaneGroupDefaultTypeInternal;
extern PolesForLaneGroupDefaultTypeInternal _PolesForLaneGroup_default_instance_;
}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace alpha {
namespace landmark {

namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto

// ===================================================================

class LandmarkPolesLayerTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile) */ {
 public:
  LandmarkPolesLayerTile();
  virtual ~LandmarkPolesLayerTile();

  LandmarkPolesLayerTile(const LandmarkPolesLayerTile& from);

  inline LandmarkPolesLayerTile& operator=(const LandmarkPolesLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LandmarkPolesLayerTile(LandmarkPolesLayerTile&& from) noexcept
    : LandmarkPolesLayerTile() {
    *this = ::std::move(from);
  }

  inline LandmarkPolesLayerTile& operator=(LandmarkPolesLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LandmarkPolesLayerTile& default_instance();

  static inline const LandmarkPolesLayerTile* internal_default_instance() {
    return reinterpret_cast<const LandmarkPolesLayerTile*>(
               &_LandmarkPolesLayerTile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LandmarkPolesLayerTile* other);
  friend void swap(LandmarkPolesLayerTile& a, LandmarkPolesLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LandmarkPolesLayerTile* New() const PROTOBUF_FINAL { return New(NULL); }

  LandmarkPolesLayerTile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LandmarkPolesLayerTile& from);
  void MergeFrom(const LandmarkPolesLayerTile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LandmarkPolesLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
  int poles_for_lane_groups_size() const;
  void clear_poles_for_lane_groups();
  static const int kPolesForLaneGroupsFieldNumber = 2;
  const ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup& poles_for_lane_groups(int index) const;
  ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* mutable_poles_for_lane_groups(int index);
  ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* add_poles_for_lane_groups();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >*
      mutable_poles_for_lane_groups();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >&
      poles_for_lane_groups() const;

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup > poles_for_lane_groups_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolesForLaneGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup) */ {
 public:
  PolesForLaneGroup();
  virtual ~PolesForLaneGroup();

  PolesForLaneGroup(const PolesForLaneGroup& from);

  inline PolesForLaneGroup& operator=(const PolesForLaneGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolesForLaneGroup(PolesForLaneGroup&& from) noexcept
    : PolesForLaneGroup() {
    *this = ::std::move(from);
  }

  inline PolesForLaneGroup& operator=(PolesForLaneGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolesForLaneGroup& default_instance();

  static inline const PolesForLaneGroup* internal_default_instance() {
    return reinterpret_cast<const PolesForLaneGroup*>(
               &_PolesForLaneGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PolesForLaneGroup* other);
  friend void swap(PolesForLaneGroup& a, PolesForLaneGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolesForLaneGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  PolesForLaneGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PolesForLaneGroup& from);
  void MergeFrom(const PolesForLaneGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PolesForLaneGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
  int poles_size() const;
  void clear_poles();
  static const int kPolesFieldNumber = 2;
  const ::com::here::pb::hdmap::external::alpha::landmark::Pole& poles(int index) const;
  ::com::here::pb::hdmap::external::alpha::landmark::Pole* mutable_poles(int index);
  ::com::here::pb::hdmap::external::alpha::landmark::Pole* add_poles();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >*
      mutable_poles();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >&
      poles() const;

  // uint64 lane_group_ref = 1;
  void clear_lane_group_ref();
  static const int kLaneGroupRefFieldNumber = 1;
  ::google::protobuf::uint64 lane_group_ref() const;
  void set_lane_group_ref(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole > poles_;
  ::google::protobuf::uint64 lane_group_ref_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.alpha.landmark.Pole) */ {
 public:
  Pole();
  virtual ~Pole();

  Pole(const Pole& from);

  inline Pole& operator=(const Pole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pole(Pole&& from) noexcept
    : Pole() {
    *this = ::std::move(from);
  }

  inline Pole& operator=(Pole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pole& default_instance();

  static inline const Pole* internal_default_instance() {
    return reinterpret_cast<const Pole*>(
               &_Pole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Pole* other);
  friend void swap(Pole& a, Pole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pole* New() const PROTOBUF_FINAL { return New(NULL); }

  Pole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pole& from);
  void MergeFrom(const Pole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
  bool has_bottom_center_point() const;
  void clear_bottom_center_point();
  static const int kBottomCenterPointFieldNumber = 4;
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d& bottom_center_point() const;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* mutable_bottom_center_point();
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* release_bottom_center_point();
  void set_allocated_bottom_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* bottom_center_point);

  // .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
  bool has_top_center_point() const;
  void clear_top_center_point();
  static const int kTopCenterPointFieldNumber = 5;
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d& top_center_point() const;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* mutable_top_center_point();
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* release_top_center_point();
  void set_allocated_top_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* top_center_point);

  // .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
  bool has_specification_compliance() const;
  void clear_specification_compliance();
  static const int kSpecificationComplianceFieldNumber = 6;
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& specification_compliance() const;
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* mutable_specification_compliance();
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* release_specification_compliance();
  void set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance);

  // sint32 bottom_cross_section_diameter_cm = 2;
  void clear_bottom_cross_section_diameter_cm();
  static const int kBottomCrossSectionDiameterCmFieldNumber = 2;
  ::google::protobuf::int32 bottom_cross_section_diameter_cm() const;
  void set_bottom_cross_section_diameter_cm(::google::protobuf::int32 value);

  // sint32 top_cross_section_diameter_cm = 3;
  void clear_top_cross_section_diameter_cm();
  static const int kTopCrossSectionDiameterCmFieldNumber = 3;
  ::google::protobuf::int32 top_cross_section_diameter_cm() const;
  void set_top_cross_section_diameter_cm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.alpha.landmark.Pole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* bottom_center_point_;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* top_center_point_;
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance_;
  ::google::protobuf::int32 bottom_cross_section_diameter_cm_;
  ::google::protobuf::int32 top_cross_section_diameter_cm_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LandmarkPolesLayerTile

// uint32 here_tile_id = 1;
inline void LandmarkPolesLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 LandmarkPolesLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void LandmarkPolesLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.here_tile_id)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup poles_for_lane_groups = 2;
inline int LandmarkPolesLayerTile::poles_for_lane_groups_size() const {
  return poles_for_lane_groups_.size();
}
inline void LandmarkPolesLayerTile::clear_poles_for_lane_groups() {
  poles_for_lane_groups_.Clear();
}
inline const ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup& LandmarkPolesLayerTile::poles_for_lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Get(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* LandmarkPolesLayerTile::mutable_poles_for_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup* LandmarkPolesLayerTile::add_poles_for_lane_groups() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >*
LandmarkPolesLayerTile::mutable_poles_for_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return &poles_for_lane_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::PolesForLaneGroup >&
LandmarkPolesLayerTile::poles_for_lane_groups() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.LandmarkPolesLayerTile.poles_for_lane_groups)
  return poles_for_lane_groups_;
}

// -------------------------------------------------------------------

// PolesForLaneGroup

// uint64 lane_group_ref = 1;
inline void PolesForLaneGroup::clear_lane_group_ref() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PolesForLaneGroup::lane_group_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.lane_group_ref)
  return lane_group_ref_;
}
inline void PolesForLaneGroup::set_lane_group_ref(::google::protobuf::uint64 value) {
  
  lane_group_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.lane_group_ref)
}

// repeated .com.here.pb.hdmap.external.alpha.landmark.Pole poles = 2;
inline int PolesForLaneGroup::poles_size() const {
  return poles_.size();
}
inline void PolesForLaneGroup::clear_poles() {
  poles_.Clear();
}
inline const ::com::here::pb::hdmap::external::alpha::landmark::Pole& PolesForLaneGroup::poles(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Get(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::Pole* PolesForLaneGroup::mutable_poles(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::alpha::landmark::Pole* PolesForLaneGroup::add_poles() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >*
PolesForLaneGroup::mutable_poles() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return &poles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::alpha::landmark::Pole >&
PolesForLaneGroup::poles() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.alpha.landmark.PolesForLaneGroup.poles)
  return poles_;
}

// -------------------------------------------------------------------

// Pole

// string id = 1;
inline void Pole::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pole::id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  return id_.GetNoArena();
}
inline void Pole::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
#if LANG_CXX11
inline void Pole::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
#endif
inline void Pole::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
inline void Pole::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}
inline ::std::string* Pole::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pole::release_id() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pole::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.id)
}

// sint32 bottom_cross_section_diameter_cm = 2;
inline void Pole::clear_bottom_cross_section_diameter_cm() {
  bottom_cross_section_diameter_cm_ = 0;
}
inline ::google::protobuf::int32 Pole::bottom_cross_section_diameter_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_cross_section_diameter_cm)
  return bottom_cross_section_diameter_cm_;
}
inline void Pole::set_bottom_cross_section_diameter_cm(::google::protobuf::int32 value) {
  
  bottom_cross_section_diameter_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_cross_section_diameter_cm)
}

// sint32 top_cross_section_diameter_cm = 3;
inline void Pole::clear_top_cross_section_diameter_cm() {
  top_cross_section_diameter_cm_ = 0;
}
inline ::google::protobuf::int32 Pole::top_cross_section_diameter_cm() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.top_cross_section_diameter_cm)
  return top_cross_section_diameter_cm_;
}
inline void Pole::set_top_cross_section_diameter_cm(::google::protobuf::int32 value) {
  
  top_cross_section_diameter_cm_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.alpha.landmark.Pole.top_cross_section_diameter_cm)
}

// .com.here.pb.hdmap.external.v1.geometry.Point3d bottom_center_point = 4;
inline bool Pole::has_bottom_center_point() const {
  return this != internal_default_instance() && bottom_center_point_ != NULL;
}
inline void Pole::clear_bottom_center_point() {
  if (GetArenaNoVirtual() == NULL && bottom_center_point_ != NULL) delete bottom_center_point_;
  bottom_center_point_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::Point3d& Pole::bottom_center_point() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d* p = bottom_center_point_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point3d_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::mutable_bottom_center_point() {
  
  if (bottom_center_point_ == NULL) {
    bottom_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  return bottom_center_point_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::release_bottom_center_point() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* temp = bottom_center_point_;
  bottom_center_point_ = NULL;
  return temp;
}
inline void Pole::set_allocated_bottom_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* bottom_center_point) {
  delete bottom_center_point_;
  bottom_center_point_ = bottom_center_point;
  if (bottom_center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.bottom_center_point)
}

// .com.here.pb.hdmap.external.v1.geometry.Point3d top_center_point = 5;
inline bool Pole::has_top_center_point() const {
  return this != internal_default_instance() && top_center_point_ != NULL;
}
inline void Pole::clear_top_center_point() {
  if (GetArenaNoVirtual() == NULL && top_center_point_ != NULL) delete top_center_point_;
  top_center_point_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::Point3d& Pole::top_center_point() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d* p = top_center_point_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point3d_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::mutable_top_center_point() {
  
  if (top_center_point_ == NULL) {
    top_center_point_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  return top_center_point_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* Pole::release_top_center_point() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* temp = top_center_point_;
  top_center_point_ = NULL;
  return temp;
}
inline void Pole::set_allocated_top_center_point(::com::here::pb::hdmap::external::v1::geometry::Point3d* top_center_point) {
  delete top_center_point_;
  top_center_point_ = top_center_point;
  if (top_center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.top_center_point)
}

// .com.here.pb.hdmap.external.v1.common.SpecificationComplianceAssertion specification_compliance = 6;
inline bool Pole::has_specification_compliance() const {
  return this != internal_default_instance() && specification_compliance_ != NULL;
}
inline void Pole::clear_specification_compliance() {
  if (GetArenaNoVirtual() == NULL && specification_compliance_ != NULL) delete specification_compliance_;
  specification_compliance_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion& Pole::specification_compliance() const {
  const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* p = specification_compliance_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion*>(
      &::com::here::pb::hdmap::external::v1::common::_SpecificationComplianceAssertion_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Pole::mutable_specification_compliance() {
  
  if (specification_compliance_ == NULL) {
    specification_compliance_ = new ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  return specification_compliance_;
}
inline ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* Pole::release_specification_compliance() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
  
  ::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* temp = specification_compliance_;
  specification_compliance_ = NULL;
  return temp;
}
inline void Pole::set_allocated_specification_compliance(::com::here::pb::hdmap::external::v1::common::SpecificationComplianceAssertion* specification_compliance) {
  delete specification_compliance_;
  specification_compliance_ = specification_compliance;
  if (specification_compliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.alpha.landmark.Pole.specification_compliance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace landmark
}  // namespace alpha
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2falpha_2flandmark_2flayer_2dlandmark_2dpoles_2eproto__INCLUDED
