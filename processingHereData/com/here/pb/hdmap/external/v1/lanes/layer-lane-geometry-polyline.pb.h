// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/here/pb/hdmap/external/v1/lanes/layer-lane-geometry-polyline.proto

#ifndef PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto__INCLUDED
#define PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com/here/pb/hdmap/external/v1/geometry/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace lanes {
class LaneBoundaryGeometry;
class LaneBoundaryGeometryDefaultTypeInternal;
extern LaneBoundaryGeometryDefaultTypeInternal _LaneBoundaryGeometry_default_instance_;
class LaneGeometry;
class LaneGeometryDefaultTypeInternal;
extern LaneGeometryDefaultTypeInternal _LaneGeometry_default_instance_;
class LaneGeometryPolylineLayerTile;
class LaneGeometryPolylineLayerTileDefaultTypeInternal;
extern LaneGeometryPolylineLayerTileDefaultTypeInternal _LaneGeometryPolylineLayerTile_default_instance_;
class LaneGroupGeometry;
class LaneGroupGeometryDefaultTypeInternal;
extern LaneGroupGeometryDefaultTypeInternal _LaneGroupGeometry_default_instance_;
}  // namespace lanes
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

namespace com {
namespace here {
namespace pb {
namespace hdmap {
namespace external {
namespace v1 {
namespace lanes {

namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto

// ===================================================================

class LaneGeometryPolylineLayerTile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile) */ {
 public:
  LaneGeometryPolylineLayerTile();
  virtual ~LaneGeometryPolylineLayerTile();

  LaneGeometryPolylineLayerTile(const LaneGeometryPolylineLayerTile& from);

  inline LaneGeometryPolylineLayerTile& operator=(const LaneGeometryPolylineLayerTile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGeometryPolylineLayerTile(LaneGeometryPolylineLayerTile&& from) noexcept
    : LaneGeometryPolylineLayerTile() {
    *this = ::std::move(from);
  }

  inline LaneGeometryPolylineLayerTile& operator=(LaneGeometryPolylineLayerTile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGeometryPolylineLayerTile& default_instance();

  static inline const LaneGeometryPolylineLayerTile* internal_default_instance() {
    return reinterpret_cast<const LaneGeometryPolylineLayerTile*>(
               &_LaneGeometryPolylineLayerTile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaneGeometryPolylineLayerTile* other);
  friend void swap(LaneGeometryPolylineLayerTile& a, LaneGeometryPolylineLayerTile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGeometryPolylineLayerTile* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneGeometryPolylineLayerTile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneGeometryPolylineLayerTile& from);
  void MergeFrom(const LaneGeometryPolylineLayerTile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneGeometryPolylineLayerTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry lane_group_geometries = 3;
  int lane_group_geometries_size() const;
  void clear_lane_group_geometries();
  static const int kLaneGroupGeometriesFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry& lane_group_geometries(int index) const;
  ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry* mutable_lane_group_geometries(int index);
  ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry* add_lane_group_geometries();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry >*
      mutable_lane_group_geometries();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry >&
      lane_group_geometries() const;

  // .com.here.pb.hdmap.external.v1.geometry.Point3d tile_center_here_3d_coordinate = 2;
  bool has_tile_center_here_3d_coordinate() const;
  void clear_tile_center_here_3d_coordinate();
  static const int kTileCenterHere3DCoordinateFieldNumber = 2;
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d& tile_center_here_3d_coordinate() const;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* mutable_tile_center_here_3d_coordinate();
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* release_tile_center_here_3d_coordinate();
  void set_allocated_tile_center_here_3d_coordinate(::com::here::pb::hdmap::external::v1::geometry::Point3d* tile_center_here_3d_coordinate);

  // uint32 here_tile_id = 1;
  void clear_here_tile_id();
  static const int kHereTileIdFieldNumber = 1;
  ::google::protobuf::uint32 here_tile_id() const;
  void set_here_tile_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry > lane_group_geometries_;
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* tile_center_here_3d_coordinate_;
  ::google::protobuf::uint32 here_tile_id_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneGroupGeometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry) */ {
 public:
  LaneGroupGeometry();
  virtual ~LaneGroupGeometry();

  LaneGroupGeometry(const LaneGroupGeometry& from);

  inline LaneGroupGeometry& operator=(const LaneGroupGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGroupGeometry(LaneGroupGeometry&& from) noexcept
    : LaneGroupGeometry() {
    *this = ::std::move(from);
  }

  inline LaneGroupGeometry& operator=(LaneGroupGeometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGroupGeometry& default_instance();

  static inline const LaneGroupGeometry* internal_default_instance() {
    return reinterpret_cast<const LaneGroupGeometry*>(
               &_LaneGroupGeometry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LaneGroupGeometry* other);
  friend void swap(LaneGroupGeometry& a, LaneGroupGeometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGroupGeometry* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneGroupGeometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneGroupGeometry& from);
  void MergeFrom(const LaneGroupGeometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneGroupGeometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneGeometry lane_geometries = 3;
  int lane_geometries_size() const;
  void clear_lane_geometries();
  static const int kLaneGeometriesFieldNumber = 3;
  const ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry& lane_geometries(int index) const;
  ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry* mutable_lane_geometries(int index);
  ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry* add_lane_geometries();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry >*
      mutable_lane_geometries();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry >&
      lane_geometries() const;

  // repeated .com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry lane_boundary_geometries = 4;
  int lane_boundary_geometries_size() const;
  void clear_lane_boundary_geometries();
  static const int kLaneBoundaryGeometriesFieldNumber = 4;
  const ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry& lane_boundary_geometries(int index) const;
  ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry* mutable_lane_boundary_geometries(int index);
  ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry* add_lane_boundary_geometries();
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry >*
      mutable_lane_boundary_geometries();
  const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry >&
      lane_boundary_geometries() const;

  // .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset reference_geometry = 2;
  bool has_reference_geometry() const;
  void clear_reference_geometry();
  static const int kReferenceGeometryFieldNumber = 2;
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& reference_geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* mutable_reference_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* release_reference_geometry();
  void set_allocated_reference_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* reference_geometry);

  // uint64 lane_group_ref = 1;
  void clear_lane_group_ref();
  static const int kLaneGroupRefFieldNumber = 1;
  ::google::protobuf::uint64 lane_group_ref() const;
  void set_lane_group_ref(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry > lane_geometries_;
  ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry > lane_boundary_geometries_;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* reference_geometry_;
  ::google::protobuf::uint64 lane_group_ref_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneGeometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.lanes.LaneGeometry) */ {
 public:
  LaneGeometry();
  virtual ~LaneGeometry();

  LaneGeometry(const LaneGeometry& from);

  inline LaneGeometry& operator=(const LaneGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGeometry(LaneGeometry&& from) noexcept
    : LaneGeometry() {
    *this = ::std::move(from);
  }

  inline LaneGeometry& operator=(LaneGeometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGeometry& default_instance();

  static inline const LaneGeometry* internal_default_instance() {
    return reinterpret_cast<const LaneGeometry*>(
               &_LaneGeometry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LaneGeometry* other);
  friend void swap(LaneGeometry& a, LaneGeometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGeometry* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneGeometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneGeometry& from);
  void MergeFrom(const LaneGeometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneGeometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset lane_path_geometry = 1;
  bool has_lane_path_geometry() const;
  void clear_lane_path_geometry();
  static const int kLanePathGeometryFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& lane_path_geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* mutable_lane_path_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* release_lane_path_geometry();
  void set_allocated_lane_path_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* lane_path_geometry);

  // uint32 left_lane_boundary_number = 2;
  void clear_left_lane_boundary_number();
  static const int kLeftLaneBoundaryNumberFieldNumber = 2;
  ::google::protobuf::uint32 left_lane_boundary_number() const;
  void set_left_lane_boundary_number(::google::protobuf::uint32 value);

  // uint32 right_lane_boundary_number = 3;
  void clear_right_lane_boundary_number();
  static const int kRightLaneBoundaryNumberFieldNumber = 3;
  ::google::protobuf::uint32 right_lane_boundary_number() const;
  void set_right_lane_boundary_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.lanes.LaneGeometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* lane_path_geometry_;
  ::google::protobuf::uint32 left_lane_boundary_number_;
  ::google::protobuf::uint32 right_lane_boundary_number_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneBoundaryGeometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry) */ {
 public:
  LaneBoundaryGeometry();
  virtual ~LaneBoundaryGeometry();

  LaneBoundaryGeometry(const LaneBoundaryGeometry& from);

  inline LaneBoundaryGeometry& operator=(const LaneBoundaryGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneBoundaryGeometry(LaneBoundaryGeometry&& from) noexcept
    : LaneBoundaryGeometry() {
    *this = ::std::move(from);
  }

  inline LaneBoundaryGeometry& operator=(LaneBoundaryGeometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundaryGeometry& default_instance();

  static inline const LaneBoundaryGeometry* internal_default_instance() {
    return reinterpret_cast<const LaneBoundaryGeometry*>(
               &_LaneBoundaryGeometry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LaneBoundaryGeometry* other);
  friend void swap(LaneBoundaryGeometry& a, LaneBoundaryGeometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneBoundaryGeometry* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneBoundaryGeometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneBoundaryGeometry& from);
  void MergeFrom(const LaneBoundaryGeometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneBoundaryGeometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset geometry = 1;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 1;
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& geometry() const;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* mutable_geometry();
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* release_geometry();
  void set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* geometry);

  // @@protoc_insertion_point(class_scope:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* geometry_;
  mutable int _cached_size_;
  friend struct protobuf_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneGeometryPolylineLayerTile

// uint32 here_tile_id = 1;
inline void LaneGeometryPolylineLayerTile::clear_here_tile_id() {
  here_tile_id_ = 0u;
}
inline ::google::protobuf::uint32 LaneGeometryPolylineLayerTile::here_tile_id() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.here_tile_id)
  return here_tile_id_;
}
inline void LaneGeometryPolylineLayerTile::set_here_tile_id(::google::protobuf::uint32 value) {
  
  here_tile_id_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.here_tile_id)
}

// .com.here.pb.hdmap.external.v1.geometry.Point3d tile_center_here_3d_coordinate = 2;
inline bool LaneGeometryPolylineLayerTile::has_tile_center_here_3d_coordinate() const {
  return this != internal_default_instance() && tile_center_here_3d_coordinate_ != NULL;
}
inline void LaneGeometryPolylineLayerTile::clear_tile_center_here_3d_coordinate() {
  if (GetArenaNoVirtual() == NULL && tile_center_here_3d_coordinate_ != NULL) delete tile_center_here_3d_coordinate_;
  tile_center_here_3d_coordinate_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::Point3d& LaneGeometryPolylineLayerTile::tile_center_here_3d_coordinate() const {
  const ::com::here::pb::hdmap::external::v1::geometry::Point3d* p = tile_center_here_3d_coordinate_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.tile_center_here_3d_coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::Point3d*>(
      &::com::here::pb::hdmap::external::v1::geometry::_Point3d_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* LaneGeometryPolylineLayerTile::mutable_tile_center_here_3d_coordinate() {
  
  if (tile_center_here_3d_coordinate_ == NULL) {
    tile_center_here_3d_coordinate_ = new ::com::here::pb::hdmap::external::v1::geometry::Point3d;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.tile_center_here_3d_coordinate)
  return tile_center_here_3d_coordinate_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::Point3d* LaneGeometryPolylineLayerTile::release_tile_center_here_3d_coordinate() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.tile_center_here_3d_coordinate)
  
  ::com::here::pb::hdmap::external::v1::geometry::Point3d* temp = tile_center_here_3d_coordinate_;
  tile_center_here_3d_coordinate_ = NULL;
  return temp;
}
inline void LaneGeometryPolylineLayerTile::set_allocated_tile_center_here_3d_coordinate(::com::here::pb::hdmap::external::v1::geometry::Point3d* tile_center_here_3d_coordinate) {
  delete tile_center_here_3d_coordinate_;
  tile_center_here_3d_coordinate_ = tile_center_here_3d_coordinate;
  if (tile_center_here_3d_coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.tile_center_here_3d_coordinate)
}

// repeated .com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry lane_group_geometries = 3;
inline int LaneGeometryPolylineLayerTile::lane_group_geometries_size() const {
  return lane_group_geometries_.size();
}
inline void LaneGeometryPolylineLayerTile::clear_lane_group_geometries() {
  lane_group_geometries_.Clear();
}
inline const ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry& LaneGeometryPolylineLayerTile::lane_group_geometries(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.lane_group_geometries)
  return lane_group_geometries_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry* LaneGeometryPolylineLayerTile::mutable_lane_group_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.lane_group_geometries)
  return lane_group_geometries_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry* LaneGeometryPolylineLayerTile::add_lane_group_geometries() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.lane_group_geometries)
  return lane_group_geometries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry >*
LaneGeometryPolylineLayerTile::mutable_lane_group_geometries() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.lane_group_geometries)
  return &lane_group_geometries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGroupGeometry >&
LaneGeometryPolylineLayerTile::lane_group_geometries() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.lanes.LaneGeometryPolylineLayerTile.lane_group_geometries)
  return lane_group_geometries_;
}

// -------------------------------------------------------------------

// LaneGroupGeometry

// uint64 lane_group_ref = 1;
inline void LaneGroupGeometry::clear_lane_group_ref() {
  lane_group_ref_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LaneGroupGeometry::lane_group_ref() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_group_ref)
  return lane_group_ref_;
}
inline void LaneGroupGeometry::set_lane_group_ref(::google::protobuf::uint64 value) {
  
  lane_group_ref_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_group_ref)
}

// .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset reference_geometry = 2;
inline bool LaneGroupGeometry::has_reference_geometry() const {
  return this != internal_default_instance() && reference_geometry_ != NULL;
}
inline void LaneGroupGeometry::clear_reference_geometry() {
  if (GetArenaNoVirtual() == NULL && reference_geometry_ != NULL) delete reference_geometry_;
  reference_geometry_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& LaneGroupGeometry::reference_geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* p = reference_geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.reference_geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString3dOffset_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneGroupGeometry::mutable_reference_geometry() {
  
  if (reference_geometry_ == NULL) {
    reference_geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.reference_geometry)
  return reference_geometry_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneGroupGeometry::release_reference_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.reference_geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* temp = reference_geometry_;
  reference_geometry_ = NULL;
  return temp;
}
inline void LaneGroupGeometry::set_allocated_reference_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* reference_geometry) {
  delete reference_geometry_;
  reference_geometry_ = reference_geometry;
  if (reference_geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.reference_geometry)
}

// repeated .com.here.pb.hdmap.external.v1.lanes.LaneGeometry lane_geometries = 3;
inline int LaneGroupGeometry::lane_geometries_size() const {
  return lane_geometries_.size();
}
inline void LaneGroupGeometry::clear_lane_geometries() {
  lane_geometries_.Clear();
}
inline const ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry& LaneGroupGeometry::lane_geometries(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_geometries)
  return lane_geometries_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry* LaneGroupGeometry::mutable_lane_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_geometries)
  return lane_geometries_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry* LaneGroupGeometry::add_lane_geometries() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_geometries)
  return lane_geometries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry >*
LaneGroupGeometry::mutable_lane_geometries() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_geometries)
  return &lane_geometries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneGeometry >&
LaneGroupGeometry::lane_geometries() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_geometries)
  return lane_geometries_;
}

// repeated .com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry lane_boundary_geometries = 4;
inline int LaneGroupGeometry::lane_boundary_geometries_size() const {
  return lane_boundary_geometries_.size();
}
inline void LaneGroupGeometry::clear_lane_boundary_geometries() {
  lane_boundary_geometries_.Clear();
}
inline const ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry& LaneGroupGeometry::lane_boundary_geometries(int index) const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_boundary_geometries)
  return lane_boundary_geometries_.Get(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry* LaneGroupGeometry::mutable_lane_boundary_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_boundary_geometries)
  return lane_boundary_geometries_.Mutable(index);
}
inline ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry* LaneGroupGeometry::add_lane_boundary_geometries() {
  // @@protoc_insertion_point(field_add:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_boundary_geometries)
  return lane_boundary_geometries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry >*
LaneGroupGeometry::mutable_lane_boundary_geometries() {
  // @@protoc_insertion_point(field_mutable_list:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_boundary_geometries)
  return &lane_boundary_geometries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::here::pb::hdmap::external::v1::lanes::LaneBoundaryGeometry >&
LaneGroupGeometry::lane_boundary_geometries() const {
  // @@protoc_insertion_point(field_list:com.here.pb.hdmap.external.v1.lanes.LaneGroupGeometry.lane_boundary_geometries)
  return lane_boundary_geometries_;
}

// -------------------------------------------------------------------

// LaneGeometry

// .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset lane_path_geometry = 1;
inline bool LaneGeometry::has_lane_path_geometry() const {
  return this != internal_default_instance() && lane_path_geometry_ != NULL;
}
inline void LaneGeometry::clear_lane_path_geometry() {
  if (GetArenaNoVirtual() == NULL && lane_path_geometry_ != NULL) delete lane_path_geometry_;
  lane_path_geometry_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& LaneGeometry::lane_path_geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* p = lane_path_geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.lane_path_geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString3dOffset_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneGeometry::mutable_lane_path_geometry() {
  
  if (lane_path_geometry_ == NULL) {
    lane_path_geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.lane_path_geometry)
  return lane_path_geometry_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneGeometry::release_lane_path_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.lane_path_geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* temp = lane_path_geometry_;
  lane_path_geometry_ = NULL;
  return temp;
}
inline void LaneGeometry::set_allocated_lane_path_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* lane_path_geometry) {
  delete lane_path_geometry_;
  lane_path_geometry_ = lane_path_geometry;
  if (lane_path_geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.lane_path_geometry)
}

// uint32 left_lane_boundary_number = 2;
inline void LaneGeometry::clear_left_lane_boundary_number() {
  left_lane_boundary_number_ = 0u;
}
inline ::google::protobuf::uint32 LaneGeometry::left_lane_boundary_number() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.left_lane_boundary_number)
  return left_lane_boundary_number_;
}
inline void LaneGeometry::set_left_lane_boundary_number(::google::protobuf::uint32 value) {
  
  left_lane_boundary_number_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.left_lane_boundary_number)
}

// uint32 right_lane_boundary_number = 3;
inline void LaneGeometry::clear_right_lane_boundary_number() {
  right_lane_boundary_number_ = 0u;
}
inline ::google::protobuf::uint32 LaneGeometry::right_lane_boundary_number() const {
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.right_lane_boundary_number)
  return right_lane_boundary_number_;
}
inline void LaneGeometry::set_right_lane_boundary_number(::google::protobuf::uint32 value) {
  
  right_lane_boundary_number_ = value;
  // @@protoc_insertion_point(field_set:com.here.pb.hdmap.external.v1.lanes.LaneGeometry.right_lane_boundary_number)
}

// -------------------------------------------------------------------

// LaneBoundaryGeometry

// .com.here.pb.hdmap.external.v1.geometry.LineString3dOffset geometry = 1;
inline bool LaneBoundaryGeometry::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
inline void LaneBoundaryGeometry::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
inline const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset& LaneBoundaryGeometry::geometry() const {
  const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* p = geometry_;
  // @@protoc_insertion_point(field_get:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset*>(
      &::com::here::pb::hdmap::external::v1::geometry::_LineString3dOffset_default_instance_);
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneBoundaryGeometry::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset;
  }
  // @@protoc_insertion_point(field_mutable:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry.geometry)
  return geometry_;
}
inline ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* LaneBoundaryGeometry::release_geometry() {
  // @@protoc_insertion_point(field_release:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry.geometry)
  
  ::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void LaneBoundaryGeometry::set_allocated_geometry(::com::here::pb::hdmap::external::v1::geometry::LineString3dOffset* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.here.pb.hdmap.external.v1.lanes.LaneBoundaryGeometry.geometry)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace lanes
}  // namespace v1
}  // namespace external
}  // namespace hdmap
}  // namespace pb
}  // namespace here
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_com_2fhere_2fpb_2fhdmap_2fexternal_2fv1_2flanes_2flayer_2dlane_2dgeometry_2dpolyline_2eproto__INCLUDED
